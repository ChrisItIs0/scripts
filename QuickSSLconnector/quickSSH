#!/bin/bash

# Path to the file containing the SSH connections
connections_file="connections.json"

# Create the connections file if it doesn't exist
if [ ! -f "$connections_file" ]; then
    echo "[]" > "$connections_file"
fi

# Function to print the menu of available SSH connections
function print_menu {
    echo "Available SSH connections:"
    # Use jq to extract the name and hostname of each connection from the JSON file
    jq -r '.[] | "\(.name) (\(.hostname))"' $connections_file | awk '{print NR".", $0}'
    echo ""
    echo "Select a connection by typing its index, or choose an option:"
    echo "a. Add a new connection"
    echo "r. Remove a connection"
    echo "x. Exit"
}

# Function to add a new SSH connection
function add_connection {
    echo "Adding a new SSH connection:"
    read -p "Name: " name
    read -p "Username: " username
    read -p "Hostname: " hostname
    # Use jq to add the new connection to the JSON file
    jq --arg name "$name" --arg username "$username" --arg hostname "$hostname" '. += [{"name": $name, "username": $username, "hostname": $hostname}]' $connections_file > temp.json
    mv temp.json $connections_file
    echo "$name successfully added."
}

# Function to remove an existing SSH connection
function remove_connection {
    read -p "Enter the name of the connection to remove: " name
    # Use jq to remove the connection from the JSON file
    jq --arg name "$name" 'del(.[] | select(.name == $name))' $connections_file > temp.json
    mv temp.json $connections_file
    echo "$name successfully removed."
}

function connect {
    # Extract the selected connection from the JSON file based on the user's input
    selected=$(jq -r --argjson index "$1" '.[$index - 1] | "\(.username)@\(.hostname)"' $connections_file)
    ssh $selected
    # If the connection fails, ask the user if they want to change the hostname
    if [ $? -ne 0 ]; then
        read -p "Failed to connect. Enter a new hostname: " new_hostname
        read -p "Do you want to permanently change the hostname of this connection? (y/n) " choice
        if [ "$choice" = "y" ]; then
    		# Use jq to update the hostname of the selected connection in the JSON file
    		jq --argjson index "$1" --arg new_hostname "$new_hostname" '.[$index - 1].hostname = $new_hostname' $connections_file > temp.json
    		mv temp.json $connections_file
    		echo "Hostname updated."
    		# Connect to the updated hostname
    		connect $1
	else
    		# Connect to the new hostname only for this attempt
    		ssh $selected -o HostName=$new_hostname
	fi
    else
        # SSH connection successful, exit the script
        exit
    fi
}


# Main loop of the program
while true; do
    print_menu
    read -p "Selection: " choice
    case $choice in
        [1-9]*) connect $choice;;
        a) add_connection;;
        r) remove_connection;;
        x) break;;
        *) echo "Invalid option.";;
    esac
done

